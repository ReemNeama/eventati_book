rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isEventOwner(eventId) {
      return isSignedIn() &&
        firestore.get(/databases/(default)/documents/events/$(eventId)).data.userId == request.auth.uid;
    }

    function isAdmin() {
      return isSignedIn() &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }

    function isValidImageSize() {
      // Limit image size to 5MB
      return request.resource.size < 5 * 1024 * 1024;
    }

    // Default rule - deny all access
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // User profile images
    match /users/{userId}/profile_image {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) && isImageFile() && isValidImageSize();
    }

    // Event images
    match /events/{eventId}/images/{imageId} {
      allow read: if isSignedIn();
      allow write: if isEventOwner(eventId) && isImageFile() && isValidImageSize();
    }

    // Event thumbnails
    match /events/{eventId}/thumbnails/{imageId} {
      allow read: if isSignedIn();
      allow write: if isEventOwner(eventId) && isImageFile() && isValidImageSize();
    }

    // Venue images
    match /venues/{venueId}/images/{imageId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() && isImageFile() && isValidImageSize();
    }

    // Venue thumbnails
    match /venues/{venueId}/thumbnails/{imageId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() && isImageFile() && isValidImageSize();
    }

    // Guest photos
    match /guests/{eventId}/{guestId}/photo {
      allow read: if isSignedIn() && isEventOwner(eventId);
      allow write: if isSignedIn() && isEventOwner(eventId) && isImageFile() && isValidImageSize();
    }

    // Service images (catering, photographer, etc.)
    // IMPORTANT: In production, service images should only be uploaded through the vendor admin projects
    // These rules are set up to allow only admin users to write, but in practice, this should be
    // handled through the separate vendor admin projects, not the main Eventati Book app
    match /services/{serviceType}/{serviceId}/images/{imageId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() && isImageFile() && isValidImageSize();
    }

    // Service thumbnails
    // IMPORTANT: In production, service thumbnails should only be uploaded through the vendor admin projects
    // These rules are set up to allow only admin users to write, but in practice, this should be
    // handled through the separate vendor admin projects, not the main Eventati Book app
    match /services/{serviceType}/{serviceId}/thumbnails/{imageId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() && isImageFile() && isValidImageSize();
    }
  }
}
